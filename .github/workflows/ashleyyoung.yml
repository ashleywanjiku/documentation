name : Build,test,pages,publish,release

on: push

jobs:
  build_docker_images:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: gamedesignerlee12
          password: dckr_pat_C4HqRs8C3vdL_JfLOX66sKKHKvM
      
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        env:
         GITHUB_USER : ${{github.actor}}
         GITHUB_TOKEN : ${{secrets.GITHUB_TOKEN}}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: |
            gamedesignerlee12/liquiid
            ghcr.io/${{ github.repository }}
      
      - name: Build and push Docker images
        env:
         REGISTRY : ghcr.io
         OWNER : liquiid
         IMAGE_NAME : ${{github.repository}}
         
      
        uses: docker/build-push-action@v2
        with:
          context: documentation
          file : documentation/Dockerfile
          push: true
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{ steps.meta.outputs.labels }}
          
  build:
     runs-on: ubuntu-latest
     
     steps :
      - uses : actions/checkout@v3
      - name : Create build dir
        run : cmake -E make_directory build
         
      - name: Apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ contains( matrix.config.os, 'ubuntu') && (matrix.config.install || matrix.config.coverage) }}
        with:
          packages: ${{ (matrix.config.coverage && 'lcov') || '' }} ${{ matrix.config.install }}
          version: 1.0

      - name: Fetched Content
        if: ${{ !matrix.config.use_bundled }}
        id: cache-fetched-content
        uses: actions/cache@v3
        with:
          path: build/_deps
          key: ${{ matrix.config.os }}-fetched-content-${{ (contains( matrix.config.cmake_args, 'Win32') && 'x86') || 'x64' }}

      - name: Update Vcpkg
        if: ${{ matrix.config.vcpkg }}
        shell: bash
        run: |
          cd ${{ (contains( matrix.config.os, 'windows') && 'C:\vcpkg') || '/usr/local/share/vcpkg' }}
          git fetch origin
          git reset --hard origin/master
          if [ "${{ (contains( matrix.config.cmake_args, 'Win32') && 'x86') || 'x64' }}-${{ (contains( matrix.config.os, 'macos') && 'osx') || ((contains( matrix.config.os, 'windows') && 'windows') || 'linux') }}" == "x64-windows" ] || [ "${{ (contains( matrix.config.cmake_args, 'Win32') && 'x86') || 'x64' }}-${{ (contains( matrix.config.os, 'macos') && 'osx') || ((contains( matrix.config.os, 'windows') && 'windows') || 'linux') }}" == "x86-windows" ]; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi
      - name : install doxygen
        run :  sudo apt install doxygen
          
      - name : Config
        working-directory : ./build
        run : |
          cmake ${{github.workspace}} ${{ matrix.config.cmake_args }} -D CMAKE_BUILD_TYPE=Release -D DOXYBOOK_BUILD_TESTS=ON -D DOXYBOOK_BUILD_EXAMPLES=OFF -D DOXYBOOK_BUILD_DOCS=OFF -D DOXYBOOK_DEVELOPER_MODE=ON -D DOXYBOOK_CATCH2_REPORTER=junit -D DOXYBOOK_BUILD_COVERAGE_REPORT=${{ (matrix.config.coverage && 'ON') || 'OFF' }} -D DOXYBOOK_SANITIZERS=${{ ((matrix.config.asan || matrix.config.tsan) && 'ON') || 'OFF' }} -D DOXYBOOK_USE_FIND_PACKAGE=${{ (matrix.config.use_bundled && 'OFF') || 'ON' }} -D DOXYBOOK_USE_FETCH_CONTENT=${{ (matrix.config.use_bundled && 'OFF') || 'ON' }} ${{ (matrix.config.cc && format('-D CMAKE_C_COMPILER=/usr/bin/{0}', matrix.config.cc)) || '' }} ${{ (matrix.config.cxx && format('-D CMAKE_CXX_COMPILER=/usr/bin/{0}', matrix.config.cxx)) || '' }} ${{ (matrix.config.flags && format('-D CMAKE_CXX_FLAGS="{0}"', matrix.config.flags)) || '' }} -D BUILD_SHARED_LIBS=${{ (matrix.config.shared && 'ON') || 'OFF' }} -D CMAKE_CXX_STANDARD=${{ matrix.config.cxxstd || '17' }} -D CMAKE_INSTALL_PREFIX=./install ${{ (matrix.config.vcpkg && '-D VCPKG_TARGET_TRIPLET=') || '' }}${{ (matrix.config.vcpkg && contains( matrix.config.cmake_args, 'Win32') && 'x86-') || (matrix.config.vcpkg && 'x64-') || '' }}${{ (matrix.config.vcpkg && contains( matrix.config.os, 'macos') && 'osx') || ((matrix.config.vcpkg && contains( matrix.config.os, 'windows') && 'windows') || (matrix.config.vcpkg && 'linux') || '') }} ${{ (matrix.config.vcpkg && contains( matrix.config.os, 'windows') && '-D CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake') || (matrix.config.vcpkg && '-D CMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake') || '' }}
     
      - name: Build
        working-directory: ./build
        run: cmake --build . --parallel ${{ steps.cpu-cores.outputs.count }} --config Release

      - name: Test
        working-directory: ./build
        run: ctest --parallel ${{ steps.cpu-cores.outputs.count }} -C Release --progress --output-on-failure

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          check_name: Test Report - ${{ matrix.config.name }}
          check_title_template: '{{TEST_NAME}}'
          report_paths: build/test/unit/reports/*.junit

      - name: Install
        working-directory: ./build
        run: ${{ ((contains( matrix.config.os, 'ubuntu') || contains( matrix.config.os, 'macos')) && 'sudo') || '' }} cmake --install .

      - name: Package
        if: ${{ matrix.config.artifact_name }}
        working-directory: ./build
        run: ${{ ((contains( matrix.config.os, 'ubuntu') || contains( matrix.config.os, 'macos')) && 'sudo') || '' }} cpack

      - name: Archive Packages
        if: ${{ matrix.config.artifact_name }}
        uses: actions/upload-artifact@v3
        with:
          name: Binary Packages ${{ matrix.config.artifact_name }}
          path: build/doxybook-?.?.?-*.*
  pages:
    name: Pages
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Dependencies
        shell: bash
        run: |
          sudo apt-get install zip unzip python3-setuptools -y
          mkdir -p ${{ github.workspace }}/public
          
      - name: Download Node
        uses: actions/setup-node@v3
        with:
          node-version: 8.x
          
      - name: Download MkDocs
        shell: bash
        run: |
          sudo python3 -m pip install mkdocs mkdocs-material mkdocs-bootswatch mkdocs-macros-plugin
          
      - name: Download GitBook CLI
        shell: bash
        run: |
          sudo npm install gitbook-cli -g
          
      - name: Install doxygen
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: doxygen
          version: 1.0

      - name: Install doxybook
        run: |
          cmake -E make_directory build
          cd build
          cmake .. -D CMAKE_BUILD_TYPE=Release -DVCPKG_TARGET_TRIPLET=x64-linux -D CMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake -D CMAKE_INSTALL_PREFIX=/bin/doxybook
          cmake --build . --config Release
          sudo cmake --install .
          
      - name: Build main docs
        run: cd Doxygen
         
      - name: Generate
        run: |
            cd Doxygen
            doxygen Doxyfile
            cd ..
            mkdir -p /tmp/gh-pages
            cp -rf ./Doxygen/xml /tmp/xml
            cp -rf ./Doxygen/html /tmp/gh-pages/original
            cp ./Doxygen/index.html /tmp/gh-pages/index.html

      - name : Build doxybook
        run: doxybook --input ./doxygen/xml --output ./Doxygen/reference --config ./Doxygen/.doxybook/config.json
          mkdocs build
          cp -rv ./site/. ${{ github.workspace }}/public
          
      - name: Build MkDocs - ReadTheDocs Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/mkdocs-readthedocs/docs \
            --config ./example/themes/mkdocs-readthedocs/.doxybook/config.json
          cd ./example/themes/mkdocs-readthedocs
          mkdocs build
          cp -rv ./site ${{ github.workspace }}/public/mkdocs-readthedocs
          
      - name: Build MkDocs - Material Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/mkdocs-material/docs \
            --config ./example/themes/mkdocs-material/.doxybook/config.json
          cd ./example/themes/mkdocs-material
          mkdocs build
          cp -rv ./site ${{ github.workspace }}/public/mkdocs-material
      - name: Build MkDocs - Bootswatch Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/mkdocs-bootswatch/docs \
            --config ./example/themes/mkdocs-bootswatch/.doxybook/config.json
          cd ./example/themes/mkdocs-bootswatch
          mkdocs build
          cp -rv ./site ${{ github.workspace }}/public/mkdocs-bootswatch
      
          cp -rv ./public ${{ github.workspace }}/public/hugo-book
      - name: Build GitBook - Default Reference
        shell: bash
        run: |
          doxybook \
            --input ./example/xml \
            --output ./example/themes/gitbook \
            --config ./example/themes/gitbook/.doxybook/config.json \
            --summary-input ./example/themes/gitbook/SUMMARY.md.tmpl \
            --summary-output ./example/themes/gitbook/SUMMARY.md
          cd ./example/themes/gitbook
          gitbook build
         
      - name: Build original
        shell: bash
        run: |
          pwd
          cp -rv ./example/html ${{ github.workspace }}/public/original
          stat ${{ github.workspace }}/public
      - name: Deploy
        if: startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/develop')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/public
          publish_branch: ${{ (startsWith(github.ref, 'refs/heads/master') && 'gh-pages') || 'gh-pages-develop' }}

          working-directory: ./build
          run: cmake --build . --parallel ${{ steps.cpu-cores.outputs.count }} --config Release

      - name: Test
        working-directory: ./build
        run: ctest --parallel ${{ steps.cpu-cores.outputs.count }} -C Release --progress --output-on-failure

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          check_name: Test Report - ${{ matrix.config.name }}
          check_title_template: '{{TEST_NAME}}'
          report_paths: build/test/unit/reports/*.junit

      - name: Install
        working-directory: ./build
        run: ${{ ((contains( matrix.config.os, 'ubuntu') || contains( matrix.config.os, 'macos')) && 'sudo') || '' }} cmake --install .

      - name: Package
        if: ${{ matrix.config.artifact_name }}
        working-directory: ./build
        run: ${{ ((contains( matrix.config.os, 'ubuntu') || contains( matrix.config.os, 'macos')) && 'sudo') || '' }} cpack

      - name: Archive Packages
        if: ${{ matrix.config.artifact_name }}
        uses: actions/upload-artifact@v3
        with:
          name: Binary Packages ${{ matrix.config.artifact_name }}
          path: build/doxybook-?.?.?-*.*

      - name: Check conventional commit
        if: ${{ !contains( matrix.config.os, 'macos') && !contains(github.event.head_commit.message, '[FOLD]') }}
        uses: webiny/action-conventional-commits@v1.1.0

      - name: Codecov generate
        if: ${{ matrix.config.coverage }}
        run: cmake --build ./build --target coverage

      - name: Codecov upload
        if: ${{ matrix.config.coverage }}
        uses: codecov/codecov-action@v3

   
